"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
from database import DatabaseManager


def show_latest_prices(exchange=None, limit=20):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã"""
    db = DatabaseManager()
    prices = db.get_latest_prices(exchange)
    
    if not prices:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
        return
    
    print(f"\nüí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã{' (' + exchange + ')' if exchange else ''}:")
    print("-" * 80)
    print(f"{'‚Ññ':<3} {'–°–∏–º–≤–æ–ª':<15} {'–ë–∏—Ä–∂–∞':<12} {'–¶–µ–Ω–∞':<15} {'–í—Ä–µ–º—è'}")
    print("-" * 80)
    
    for i, price_data in enumerate(prices[:limit], 1):
        print(f"{i:<3} {price_data['symbol']:<15} {price_data['exchange']:<12} "
              f"${price_data['price']:<14.6f} {price_data['timestamp']}")
    
    if len(prices) > limit:
        print(f"... –∏ –µ—â–µ {len(prices) - limit} –∑–∞–ø–∏—Å–µ–π")


def show_top_differences(limit=10):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Ä–∞–∑–ª–∏—á–∏–π –≤ —Ü–µ–Ω–∞—Ö"""
    db = DatabaseManager()
    differences = db.get_top_differences(limit)
    
    if not differences:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö –≤ —Ü–µ–Ω–∞—Ö")
        return
    
    print(f"\nüìä –¢–æ–ø-{limit} —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–ª–∏—á–∏–π –≤ —Ü–µ–Ω–∞—Ö:")
    print("-" * 100)
    print(f"{'‚Ññ':<3} {'–°–∏–º–≤–æ–ª':<15} {'–ë–∏—Ä–∂–∞ 1':<12} {'–¶–µ–Ω–∞ 1':<15} {'–ë–∏—Ä–∂–∞ 2':<12} {'–¶–µ–Ω–∞ 2':<15} {'–†–∞–∑–Ω–∏—Ü–∞':<15} {'%'}")
    print("-" * 100)
    
    for i, diff in enumerate(differences, 1):
        print(f"{i:<3} {diff['symbol']:<15} {diff['exchange1']:<12} "
              f"${diff['price1']:<14.6f} {diff['exchange2']:<12} "
              f"${diff['price2']:<14.6f} ${diff['price_difference']:<14.6f} "
              f"{diff['percentage_difference']:<6.2f}%")


def show_exchange_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∏—Ä–∂–∞–º"""
    db = DatabaseManager()
    stats = db.get_exchange_stats()
    
    if not stats:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
        return
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º:")
    print("-" * 40)
    print(f"{'–ë–∏—Ä–∂–∞':<15} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä'}")
    print("-" * 40)
    
    total_pairs = 0
    for exchange, data in stats.items():
        print(f"{exchange:<15} {data['pair_count']:<15}")
        total_pairs += data['pair_count']
    
    print("-" * 40)
    print(f"{'–í—Å–µ–≥–æ':<15} {total_pairs:<15}")


def show_common_symbols():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏"""
    db = DatabaseManager()
    prices = db.get_latest_prices()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    symbols = {}
    for price in prices:
        symbol = price['symbol']
        if symbol not in symbols:
            symbols[symbol] = []
        symbols[symbol].append(price)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏—Ä–∂–∞—Ö
    common_symbols = {symbol: exchanges for symbol, exchanges in symbols.items() 
                     if len(exchanges) > 1}
    
    if not common_symbols:
        print("–ù–µ—Ç –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏")
        return
    
    print(f"\nüîó –û–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ ({len(common_symbols)} —Å–∏–º–≤–æ–ª–æ–≤):")
    print("-" * 80)
    print(f"{'–°–∏–º–≤–æ–ª':<15} {'–ë–∏—Ä–∂–∏':<30} {'–¶–µ–Ω—ã'}")
    print("-" * 80)
    
    for symbol, exchanges in sorted(common_symbols.items()):
        exchange_names = [ex['exchange'] for ex in exchanges]
        prices_str = " | ".join([f"{ex['exchange']}: ${ex['price']:.6f}" for ex in exchanges])
        print(f"{symbol:<15} {', '.join(exchange_names):<30} {prices_str}")


def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        print("\n" + "="*60)
        print("           –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–• –¢–û–†–ì–û–í–´–• –ü–ê–†")
        print("="*60)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –±–∏—Ä–∂–µ")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Ä–∞–∑–ª–∏—á–∏–π –≤ —Ü–µ–Ω–∞—Ö")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∏—Ä–∂–∞–º")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã")
        print("6. –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("0. –í—ã—Ö–æ–¥")
        print("-"*60)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-6): ").strip()
        
        if choice == "0":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == "1":
            limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ").strip()
            limit = int(limit) if limit.isdigit() else 20
            show_latest_prices(limit=limit)
        elif choice == "2":
            exchange = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ (hyperliquid/lighter): ").strip()
            if exchange in ['hyperliquid', 'lighter']:
                limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ").strip()
                limit = int(limit) if limit.isdigit() else 20
                show_latest_prices(exchange=exchange, limit=limit)
            else:
                print("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏")
        elif choice == "3":
            limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
            limit = int(limit) if limit.isdigit() else 10
            show_top_differences(limit=limit)
        elif choice == "4":
            show_exchange_stats()
        elif choice == "5":
            show_common_symbols()
        elif choice == "6":
            days = input("–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): ").strip()
            days = int(days) if days.isdigit() else 7
            db = DatabaseManager()
            db.clear_old_data(days)
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main()
