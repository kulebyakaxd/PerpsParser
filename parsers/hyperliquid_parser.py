"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö —Å Hyperliquid
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API
"""
import asyncio
import aiohttp
import requests
from typing import List, Dict, Any
from database import DatabaseManager
from utils.telegram_notifier import get_notifier


class HyperliquidParser:
    def __init__(self, db_manager: DatabaseManager = None):
        self.base_url = "https://api.hyperliquid.xyz"
        self.session = None
        self.db_manager = db_manager or DatabaseManager()
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def get_pairs_with_prices(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –∏—Ö —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"symbol": str, "price": float}
        """
        try:
            await self.initialize()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
            meta_data = await self._get_meta_info()
            if not meta_data:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
            prices_data = await self._get_all_mids()
            if not prices_data:
                return []
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            pairs = []
            valid_symbols: List[str] = []
            universe = meta_data.get('universe', [])
            
            for asset in universe:
                symbol = asset.get('name', '')
                if symbol and symbol in prices_data:
                    try:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–∏–º–≤–æ–ª LISTA –Ω–∞ Hyperliquid
                        if str(symbol).strip().upper() == 'LISTA':
                            continue
                        price = float(prices_data[symbol])
                        pairs.append({
                            "symbol": symbol,
                            "price": price
                        })
                        valid_symbols.append(str(symbol).strip().upper())
                    except (ValueError, TypeError) as e:
                        get_notifier().log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                        continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if pairs:
                saved_count = self.db_manager.save_trading_pairs("hyperliquid", pairs)
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–Ω–∞–ø—à–æ—Ç–∞ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —ç—Ç–æ–π –±–∏—Ä–∂–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
                try:
                    if valid_symbols:
                        self.db_manager.sync_exchange_snapshot("hyperliquid", valid_symbols)
                except Exception:
                    pass
                get_notifier().log(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–∞—Ä Hyperliquid –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            return pairs
                
        except Exception as e:
            get_notifier().log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    async def _get_meta_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö"""
        try:
            url = f"{self.base_url}/info"
            payload = {"type": "meta"}
            
            async with self.session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    get_notifier().log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {len(data.get('universe', []))} –∞–∫—Ç–∏–≤–æ–≤")
                    return data
                else:
                    get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                    return {}
        except Exception as e:
            get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    async def _get_all_mids(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤"""
        try:
            url = f"{self.base_url}/info"
            payload = {"type": "allMids"}
            
            async with self.session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    get_notifier().log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è {len(data)} –∞–∫—Ç–∏–≤–æ–≤")
                    return data
                else:
                    get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω")
                    return {}
        except Exception as e:
            get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
            return {}
    
    def _extract_pairs_from_data(self, data: Any) -> List[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä—ã –∏ —Ü–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö API
        """
        pairs = []
        
        try:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–∏
            if isinstance(data, dict):
                for key, value in data.items():
                    if isinstance(value, (int, float)) and value > 0:
                        pairs.append({
                            "symbol": str(key),
                            "price": float(value)
                        })
                    elif isinstance(value, dict) and 'price' in value:
                        pairs.append({
                            "symbol": str(key),
                            "price": float(value['price'])
                        })
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            elif isinstance(data, list):
                for item in data:
                    if isinstance(item, dict):
                        if 'symbol' in item and 'price' in item:
                            pairs.append({
                                "symbol": str(item['symbol']),
                                "price": float(item['price'])
                            })
                        elif 'name' in item and 'price' in item:
                            pairs.append({
                                "symbol": str(item['name']),
                                "price": float(item['price'])
                            })
            
            get_notifier().log(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pairs)} –ø–∞—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            return pairs
            
        except Exception as e:
            get_notifier().log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–∞—Ä: {e}")
            return []
    
    def get_pairs_with_prices_sync(self) -> List[Dict[str, Any]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä —Å —Ü–µ–Ω–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            meta_data = self._get_meta_info_sync()
            if not meta_data:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            prices_data = self._get_all_mids_sync()
            if not prices_data:
                return []
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            pairs = []
            universe = meta_data.get('universe', [])
            
            for asset in universe:
                symbol = asset.get('name', '')
                if symbol and symbol in prices_data:
                    try:
                        price = float(prices_data[symbol])
                        pairs.append({
                            "symbol": symbol,
                            "price": price
                        })
                    except (ValueError, TypeError) as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                        continue
            
            return pairs
            
        except Exception as e:
            get_notifier().log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def _get_meta_info_sync(self) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            url = f"{self.base_url}/info"
            payload = {"type": "meta"}
            
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                get_notifier().log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {len(data.get('universe', []))} –∞–∫—Ç–∏–≤–æ–≤")
                return data
            else:
                get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                return {}
        except Exception as e:
            get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    def _get_all_mids_sync(self) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω"""
        try:
            url = f"{self.base_url}/info"
            payload = {"type": "allMids"}
            
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                get_notifier().log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è {len(data)} –∞–∫—Ç–∏–≤–æ–≤")
                return data
            else:
                get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω")
                return {}
        except Exception as e:
            get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
            return {}


async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = HyperliquidParser()
    
    try:
        get_notifier().log("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Hyperliquid...")
        pairs = await parser.get_pairs_with_prices()
        
        if pairs:
            get_notifier().log(f"–ù–∞–π–¥–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:")
            for i, pair in enumerate(pairs[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ä
                get_notifier().log(f"{i:2d}. {pair['symbol']:20s} - ${pair['price']:>12.6f}")
        else:
            get_notifier().log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        return pairs
        
    finally:
        await parser.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    pairs = asyncio.run(main())
