"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö —Å Lighter
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API
"""
import asyncio
import aiohttp
import requests
from typing import List, Dict, Any
from database import DatabaseManager
from utils.telegram_notifier import get_notifier


class LighterParser:
    def __init__(self, db_manager: DatabaseManager = None):
        self.base_url = "https://mainnet.zklighter.elliot.ai/api/v1"
        self.session = None
        self.db_manager = db_manager or DatabaseManager()
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def get_pairs_with_prices(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –∏—Ö —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"symbol": str, "price": float}
        """
        try:
            await self.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —Ä—ã–Ω–∫–∞—Ö —Å —Ü–µ–Ω–∞–º–∏
            order_book_data = await self._get_order_book_details()
            if not order_book_data:
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã –∏ —Ü–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            pairs = []
            valid_symbols: List[str] = []
            for market in order_book_data:
                try:
                    symbol = str(market.get('symbol', '')).strip().upper()
                    price = market.get('last_trade_price')
                    if not symbol:
                        continue
                    if price is None:
                        continue
                    price = float(price)
                    if price <= 0:
                        continue
                    pairs.append({
                        "symbol": symbol,
                        "price": price
                    })
                    valid_symbols.append(symbol)
                except (ValueError, TypeError):
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if pairs:
                saved_count = self.db_manager.save_trading_pairs("lighter", pairs)
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–Ω–∞–ø—à–æ—Ç: —É–¥–∞–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                try:
                    self.db_manager.sync_exchange_snapshot("lighter", valid_symbols)
                except Exception:
                    pass
                get_notifier().log(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–∞—Ä Lighter –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            return pairs
                
        except Exception as e:
            get_notifier().log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    async def _get_order_book_details(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–±—É–∫–∞ —Å–æ –≤—Å–µ–º–∏ —Ä—ã–Ω–∫–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏"""
        try:
            url = f"{self.base_url}/orderBookDetails"
            get_notifier().log(f"–ó–∞–ø—Ä–æ—Å –∫: {url}")
            
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('code') == 200:
                        order_book_details = data.get('order_book_details', [])
                        get_notifier().log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(order_book_details)} —Ä—ã–Ω–∫–æ–≤")
                        return order_book_details
                    else:
                        get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message', 'Unknown error')}")
                        return []
                else:
                    get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                    return []
        except Exception as e:
            get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def get_pairs_with_prices_sync(self) -> List[Dict[str, Any]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä —Å —Ü–µ–Ω–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —Ä—ã–Ω–∫–∞—Ö —Å —Ü–µ–Ω–∞–º–∏
            order_book_data = self._get_order_book_details_sync()
            if not order_book_data:
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã –∏ —Ü–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            pairs = []
            valid_symbols: List[str] = []
            for market in order_book_data:
                try:
                    symbol = str(market.get('symbol', '')).strip().upper()
                    price = market.get('last_trade_price')
                    if not symbol:
                        continue
                    if price is None:
                        continue
                    price = float(price)
                    if price <= 0:
                        continue
                    pairs.append({
                        "symbol": symbol,
                        "price": price
                    })
                    valid_symbols.append(symbol)
                except (ValueError, TypeError):
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if pairs:
                saved_count = self.db_manager.save_trading_pairs("lighter", pairs)
                try:
                    self.db_manager.sync_exchange_snapshot("lighter", valid_symbols)
                except Exception:
                    pass
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–∞—Ä Lighter –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            return pairs
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def _get_order_book_details_sync(self) -> List[Dict[str, Any]]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            url = f"{self.base_url}/orderBookDetails"
            get_notifier().log(f"–ó–∞–ø—Ä–æ—Å –∫: {url}")
            
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get('code') == 200:
                    order_book_details = data.get('order_book_details', [])
                    get_notifier().log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(order_book_details)} —Ä—ã–Ω–∫–æ–≤")
                    return order_book_details
                else:
                    get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message', 'Unknown error')}")
                    return []
            else:
                get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                return []
        except Exception as e:
            get_notifier().log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []


async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = LighterParser()
    
    try:
        get_notifier().log("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Lighter...")
        pairs = await parser.get_pairs_with_prices()
        
        if pairs:
            get_notifier().log(f"–ù–∞–π–¥–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:")
            for i, pair in enumerate(pairs[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ä
                get_notifier().log(f"{i:2d}. {pair['symbol']:20s} - ${pair['price']:>12.6f}")
        else:
            get_notifier().log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        return pairs
        
    finally:
        await parser.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    pairs = asyncio.run(main())
